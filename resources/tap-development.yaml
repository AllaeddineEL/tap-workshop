#@ load("@ytt:data", "data")
---
apiVersion: training.eduk8s.io/v1alpha2
kind: Workshop
metadata:
  name: tap-development
spec:
  title: Experimental
  description: Pre-release development version of the TAP Demo
  vendor: eduk8s.io
  difficulty: beginner
  duration: 30m
  url: https://github.com/tanzu-end-to-end/tap-workshop
  content:
    image: #@ "harbor.{}/tanzu-e2e/eduk8s-tap-workshop:latest".format(data.values.ingress.domain)
    files: #@ "github.com/{}/tap-workshop?ref=development".format(data.values.git.account)
  session:
    env:
      - name: GITEA_PASSWORD
        value: #@ data.values.gitea.adminPassword
      - name: HARBOR_PASSWORD
        value: #@ data.values.harbor.adminPassword
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
        vendor: octant
      editor:
        enabled: true
    objects:
      - apiVersion: v1
        kind: LimitRange
        metadata:
          name: resource-limits
        spec:
          limits:
            - type: PersistentVolumeClaim
              max:
                storage: 10Gi

      # Lifecycle of Harbor Projects
      - apiVersion: e2e.tanzu.vmware.com/v1beta1
        kind: HarborProject
        metadata:
          name: $(session_namespace)
          annotations:
            training.eduk8s.io/objects.crd.scope: Namespaced
        spec:
          name: $(session_namespace)

      # Permissions for tap-sa (Supply Chain)
      - apiVersion: v1
        kind: Secret
        metadata:
          name: tap-registry
          annotations:
            secretgen.carvel.dev/image-pull-secret: ""
        type: kubernetes.io/dockerconfigjson
        data:
          .dockerconfigjson: e30K

      - apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: tap-sa
        secrets:
          - name: registry-credentials
        imagePullSecrets:
          - name: registry-credentials
          - name: tap-registry

      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-kapp-permissions
          annotations:
            kapp.k14s.io/change-group: "role"
        rules:
          - apiGroups:
              - servicebinding.io
            resources: ['servicebindings']
            verbs: ['*']
          - apiGroups:
              - services.tanzu.vmware.com
            resources: ['resourceclaims']
            verbs: ['*']
          - apiGroups:
              - serving.knative.dev
            resources: ['services']
            verbs: ['*']
          - apiGroups: [""]
            resources: ['configmaps']
            verbs: ['get', 'watch', 'list', 'create', 'update', 'patch', 'delete']

      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-kapp-permissions
          annotations:
            kapp.k14s.io/change-rule: "upsert after upserting role"
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-kapp-permissions
        subjects:
          - kind: ServiceAccount
            namespace: $(session_namespace)
            name: tap-sa

      # Permissions for workshop session
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: $(session_namespace)-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            namespace: $(workshop_namespace)
            name: $(service_account)

      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: service-account-role
          namespace: $(session_namespace)
        rules:
          - apiGroups: ["*"]
            resources: ["*"]
            verbs: ["*"]

      # App Live View Connector
      - apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: app-live-view-connector-service-account
          namespace: $(session_namespace)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-app-live-view-connector-role
        rules:
          - apiGroups: ["*"]
            resources: ["pods"]
            verbs: ["watch"]
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-app-live-view-connector-role-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-app-live-view-connector-role
        subjects:
          - kind: ServiceAccount
            name: app-live-view-connector-service-account
            namespace: $(session_namespace)
      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: application-live-view-connector
          namespace: $(session_namespace)
          labels:
            app: application-live-view-connector
        spec:
          selector:
            matchLabels:
              name: application-live-view-connector
          template:
            metadata:
              labels:
                name: application-live-view-connector
            spec:
              serviceAccountName: app-live-view-connector-service-account
              containers:
                - name: application-live-view-connector
                  image: harbor.tap.amer.end2end.link/app-live-view/connector
                  imagePullPolicy: IfNotPresent
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8787
                    initialDelaySeconds: 15
                    periodSeconds: 5
                    timeoutSeconds: 3
                  resources:
                    requests:
                      memory: "70Mi"
                      cpu: "150m"
                    limits:
                      memory: "120Mi"
                      cpu: "250m"
                  env:
                    - name: app.live.view.client.host
                      value: application-live-view-7000.app-live-view.svc.cluster.local
                    - name: NODE_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: spec.nodeName
                    - name: NAMESPACE_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    - name: app.live.view.connector.mode
                      value: "namespace-scoped"
      - apiVersion: rabbitmq.com/v1beta1
        kind: RabbitmqCluster
        metadata:
          name: rmq-1
          namespace: $(session_namespace)
        spec:
          resources:
            requests:
              cpu: 100m
              memory: 250Mi
            limits:
              cpu: 100m
              memory: 250Mi
      - apiVersion: carto.run/v1alpha1
        kind: Workload
        metadata:
          name: spring-sensors-sensor
          namespace: $(session_namespace)
          labels:
            apps.tanzu.vmware.com/workload-type: web
        spec:
          source:
            git:
              url: https://github.com/tanzu-end-to-end/spring-sensors-sensor
              ref:
                branch: main
          serviceClaims:
            - name: rmq
              ref:
                apiVersion: rabbitmq.com/v1beta1
                kind: RabbitmqCluster
                name: rmq-1